<%= render 'shared/alert' %>
<div class="max-w-6xl mx-auto px-4 py-8" data-controller="cart">
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-4xl font-bold text-gray-900">Lista de Produtos</h1>

    <div class="flex gap-2">
      <%= link_to "Voltar", order_path(@order),
        class: "border border-gray-600 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-100 transition"
      %>
      <button id="toggle-cart"
        class="flex items-center gap-2 bg-gray-700 text-white px-4 py-2 rounded-md hover:bg-gray-800 transition">
        ðŸ›’ <span>Ver Carrinho</span>
        <span id="cart-count" class="text-white font-semibold">
          0
        </span>
      </button>
    </div>
  </div>

  <!-- Carrinho -->
  <section id="cart-section" class="hidden bg-gray-50 p-6 rounded-md border mb-10">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-2xl font-bold">Itens Selecionados</h2>
    </div>

    <ul id="cart-list" class="space-y-3 mb-4"></ul>
    <p id="empty-cart-message" class="text-gray-500">NÃ£o hÃ¡ itens no carrinho.</p>

    <%= form_with url: order_orders_lots_path(@order), method: :post, local: true, id: "order-lots-form", data: { order_id: @order.id } do %>
      <div id="order-lots-fields"></div>
      <div class="flex justify-between items-center mt-4">
        <button id="cancel-cart" type="button"
          class="px-4 py-2 border border-red-600 text-red-600 rounded-md hover:bg-red-600 hover:text-white transition hidden">
          Cancelar Pedido
        </button>
        <button id="confirm-order-button" type="submit"
          class="mt-2 text-sm px-5 py-2 border border-green-600 text-green-600 rounded-md hover:bg-green-600 hover:text-white transition hidden">
          Confirmar Pedido
        </button>
      </div>
    <% end %>
  </section>

  <% @lots.group_by(&:product).each do |product, lots| %>
    <section class="mb-8">
      <h2 class="text-xl font-semibold mb-4"><%= product.name %></h2>

      <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
        <% lots.each do |lot| %>
          <li
            class="bg-white rounded-xl shadow hover:shadow-lg transition duration-200 p-5 flex flex-col justify-between h-full block hover:scale-105">
            <div class="mb-3 space-y-1">
              <h3 class="text-lg font-semibold text-gray-700 mb-1">
                Lote <%= lot.id %>
              </h3>
              <p class="text-sm text-gray-500">
                Validade:
                <span class="font-medium text-gray-800"><%= lot.expiration_date %></span>
              </p>
              <p class="text-sm text-gray-500">
                Quantidade disponÃ­vel:
                <span class="font-medium text-gray-800"><%= lot.quantity %> unidades</span>
              </p>
            </div>

            <div class="mt-auto">
              <input type="number" min="1" max="<%= lot.quantity %>"
                class="quantity-input border border-gray-300 rounded-lg p-2 w-full mb-3 focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="Quantidade" />

              <button
                class="add-to-cart bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 w-full transition"
                data-lot-id="<%= lot.id %>"
                data-product-name="<%= product.name %>"
                data-expiration="<%= lot.expiration_date %>">
                Adicionar ao Pedido
              </button>
            </div>
          </li>
        <% end %>
      </ul>
    </section>
  <% end %>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const cart = [];
  const cartList = document.getElementById("cart-list");
  const cartCount = document.getElementById("cart-count");
  const cartSection = document.getElementById("cart-section");
  const toggleCartButton = document.getElementById("toggle-cart");
  const cancelCartButton = document.getElementById("cancel-cart");
  const emptyCartMessage = document.getElementById("empty-cart-message");
  const confirmOrderButton = document.getElementById("confirm-order-button");

  function updateCartDisplay() {
    cartList.innerHTML = "";

    if (cart.length === 0) {
      emptyCartMessage.classList.remove("hidden");
      confirmOrderButton.classList.add("hidden");
      cancelCartButton.classList.add("hidden");
    } else {
      emptyCartMessage.classList.add("hidden");
      confirmOrderButton.classList.remove("hidden");
      cancelCartButton.classList.remove("hidden");
    }

    cart.forEach(item => {
      const li = document.createElement("li");
      li.className = "bg-white p-3 rounded-md shadow flex justify-between items-center";
      li.innerHTML = `
        <span>${item.quantity}x "${item.productName}" (Lote ${item.lotId}, validade ${item.expiration})</span>
        <button class="remove-item text-red-500 hover:underline" data-lot-id="${item.lotId}">Remover</button>
      `;
      cartList.appendChild(li);
    });

    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    cartCount.textContent = totalItems;

    document.querySelectorAll(".remove-item").forEach(button => {
      button.addEventListener("click", () => {
        const lotId = button.dataset.lotId;
        const index = cart.findIndex(i => i.lotId === lotId);
        if (index !== -1) {
          cart.splice(index, 1);
          updateCartDisplay();
        }
      });
    });
  }

  toggleCartButton.addEventListener("click", () => {
    cartSection.classList.toggle("hidden");
  });

  cancelCartButton.addEventListener("click", () => {
    if (confirm("Deseja cancelar o pedido?")) {
      cart.length = 0;
      updateCartDisplay();
    }
  });

  document.querySelectorAll(".add-to-cart").forEach(button => {
    button.addEventListener("click", () => {
      const lotId = button.dataset.lotId;
      const productName = button.dataset.productName;
      const expiration = button.dataset.expiration;
      const quantityInput = button.previousElementSibling;
      const quantity = parseInt(quantityInput.value);

      if (!quantity || quantity <= 0) {
        alert("Informe uma quantidade vÃ¡lida.");
        return;
      }

      const existingItem = cart.find(i => i.lotId === lotId);
      if (existingItem) {
        existingItem.quantity += quantity;
      } else {
        cart.push({ lotId, productName, quantity, expiration });
      }

      updateCartDisplay();
      quantityInput.value = "";
    });
  });

  document.getElementById("order-lots-form").addEventListener("submit", (e) => {
    const fieldsContainer = document.getElementById("order-lots-fields");
    fieldsContainer.innerHTML = "";

    cart.forEach(item => {
      const lotIdInput = document.createElement("input");
      lotIdInput.type = "hidden";
      lotIdInput.name = `order_lots[][lot_id]`;
      lotIdInput.value = item.lotId;
      fieldsContainer.appendChild(lotIdInput);

      const quantityInput = document.createElement("input");
      quantityInput.type = "hidden";
      quantityInput.name = `order_lots[][quantity]`;
      quantityInput.value = item.quantity;
      fieldsContainer.appendChild(quantityInput);
    });
  });

});
</script>

